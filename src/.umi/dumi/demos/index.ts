// @ts-nocheck
import React from 'react';
import { dynamic } from 'dumi';

export default {
  'biuui-arrowbutton': {
    component: require('/Users/shide/PROJ/biuUI/demo/ArrowButton.tsx').default,
    previewerProps: {
      sources: {
        _: {
          tsx:
            'import React from \'react\';\nimport { ArrowButton } from \'../src\';\n\nfunction ArrowButtonDemo() {\n  return (\n    <div>\n      <ArrowButton type="arc" />\n      <br />\n      <ArrowButton type="notching" />\n      <br />\n      <ArrowButton type="arrow" />\n      <br />\n      <ArrowButton type="arrow2" />\n      <br />\n      <ArrowButton type="coupon" />\n    </div>\n  );\n}\nexport default ArrowButtonDemo;\n'
        },
        'src/index.ts': {
          import: '../src',
          content:
            "export { default as Button } from './components/Button';\nexport { default as Tag } from './components/Tag';\nexport { default as Curtain } from './components/Curtain';\nexport { default as ArrowButton } from './components/ArrowButton';\nexport { default as Countdown } from './components/Countdown';\n"
        },
        'components/Button/index.tsx': {
          import: './components/Button',
          content:
            "import * as React from 'react';\nimport classnames from 'classnames';\nimport './index.less';\n\n/**\n * @param {onClick} func 对外暴露的点击事件\n * @param {className} string 自定义类名\n * @param {type} string 按钮类型 primary | warning | info | default | pure\n * @param {shape} string 按钮形状 circle | radius(默认)\n */\ntype ButtonType =\n  | 'primary'\n  | 'warning'\n  | 'info'\n  | 'default'\n  | 'pure'\n  | 'slider1'\n  | 'slider2';\n\ntype typeModel = 'nomal' | 'slide' | undefined;\n\ninterface IButton {\n  typeModel?: typeModel;\n  type?: ButtonType;\n  children?: React.ReactNode;\n  shape?: string;\n  block?: string;\n  className?: string;\n  onClick?: React.MouseEventHandler<HTMLElement>;\n}\nconst typeModelArr = {\n  nomal: 'biu-btn',\n  slide: 'bit-btn-slide'\n};\nfunction Button(props: IButton) {\n  const { children, onClick, className, type, shape, block, typeModel } = props;\n\n  const handTypeModal = (typeModel: typeModel): string => {\n    switch (true) {\n      case typeModel === 'slide':\n        return typeModelArr['slide'];\n      default:\n        return typeModelArr['nomal'];\n    }\n  };\n\n  return (\n    <button\n      className={classnames(\n        `${handTypeModal(typeModel)}`,\n        'ripple',\n        type,\n        shape,\n        block ? 'block' : '',\n        className\n      )}\n      onClick={onClick}\n    >\n      {children}\n    </button>\n  );\n}\n\nexport default Button;\n"
        },
        'index.less': {
          import: './index.less',
          content:
            '// @import "../../style/theme/default.scss";\n// @import "../../style/mixins/index.scss";\n\n\n\n\n// $font-size: $font-size-lg;\n\n// .at-count-down {\n//   display: inline-block;\n//   min-height: $font-size;\n\n//   &__item {\n//     display: inline-flex;\n//     align-items: center;\n//   }\n\n//   &__time-box {\n//     display: inline-block;\n//     text-align: center;\n//     min-width: $font-size;\n//     font: {\n//       size: $font-size;\n//       family: countDownFont;\n//       style: normal;\n//       weight: 400;\n//       variant: normal;\n//     }\n\n//     text-transform: none;\n//     text-rendering: auto;\n//     line-height: 1;\n//     -webkit-font-smoothing: antialiased;\n//     vertical-align: middle;\n//   }\n\n//   &__separator {\n//     font-size: $font-size-base;\n//     display: inline-flex;\n//     align-items: center;\n//     text-align: justify;\n//     padding: 0 $spacing-v-xs;\n//   }\n\n//   &--card {\n//     .at-count-down__time-box {\n//       padding: $spacing-v-xs 0;\n//       border: 1PX solid $color-border-grey;\n//       border-radius: $border-radius-md;\n//       color: #FF4949;\n//       display: inline-block;\n//       background-color: #fff;\n//       position: relative;\n\n//       .at-count-down__time {\n//         position: relative;\n//         z-index: $zindex-divider + 1;\n//       }\n\n//       &::after {\n//         position: absolute;\n//         content: \'\';\n//         width: 100%;\n//         height: 1PX;\n//         top: 50%;\n//         left: 0;\n//         z-index: $zindex-divider;\n//         background-color: $color-grey-3;\n//       }\n//     }\n//   }\n// }\n.biu-countdown{\n  display: inline-block;\n  .biu-countdown__item{\n    display: inline-flex;\n    align-items: center;\n    .biu-countdown__time-box{\n      color: #333;\n      display: inline-block;\n      background-color: #fff;\n      position: relative;\n      .biu-countdown__time{\n        \n      }\n    }\n    .biu-countdown__separator{\n      display: inline-flex;\n      text-align: justify;\n      align-items: center;\n    }\n  }\n}\n\n'
        },
        'components/Tag/index.tsx': {
          import: './components/Tag',
          content:
            "import React from 'react';\nimport classnames from 'classnames';\nimport './index.less';\n\n/**\n * 标签组件\n * @param {closable} boolean 是否可关闭\n * @param {onClose} func 标签关闭时的回调\n * @param {color} string 标签的颜色,不设置则为默认颜色\n */\nfunction Tag(props) {\n  let { children, closable, onClose, color } = props;\n  let tag = React.createRef();\n  let handleClose = () => {\n    onClose && onClose();\n    tag.current.style.display = 'none';\n  };\n  return (\n    <div\n      className={classnames('xTag', color ? 'xTagHasColor' : '')}\n      style={{ backgroundColor: color }}\n      ref={tag}\n    >\n      {children}\n      {closable && (\n        <span className=\"closeBtn\" onClick={handleClose}>\n          x\n        </span>\n      )}\n    </div>\n  );\n}\n\nexport default Tag;\n"
        },
        'components/Curtain/index.tsx': {
          import: './components/Curtain',
          content:
            "import React from 'react';\n\nimport './index.less';\n\ninterface IProps {\n  visible?: boolean;\n  title?: string;\n  onClose?: () => void;\n  closeBtnPosition?:\n    | 'top'\n    | 'top-left'\n    | 'top-right'\n    | 'bottom'\n    | 'bottom-left'\n    | 'bottom-right'\n    | 'none'\n    | undefined;\n}\n\ninterface IState {\n  _visible?: boolean;\n}\nclass Index extends React.Component<IProps, IState> {\n  public constructor(props: IProps) {\n    super(props);\n    const { visible } = props;\n    this.state = {\n      _visible: visible\n    };\n  }\n\n  public componentWillReceiveProps(nextProps: IProps) {\n    const { visible } = nextProps;\n    if (visible !== this.state._visible) {\n      this.setState({\n        _visible: visible\n      });\n    }\n  }\n\n  private handleClose = () => {\n    if (typeof this.props.onClose === 'function') {\n      this.props.onClose();\n    }\n  };\n\n  private close = () => {\n    this.setState(\n      {\n        _visible: false\n      },\n      this.handleClose\n    );\n  };\n\n  render(): JSX.Element | null {\n    const { _visible } = this.state;\n    const { visible, title, closeBtnPosition = 'bottom' } = this.props;\n    if (!visible) return null;\n    return (\n      <div\n        className=\"mask-con\"\n        style={{ visibility: _visible ? 'visible' : '' }}\n      >\n        <div className=\"layout__overlay\" onClick={this.close} />\n        <div className=\"layout__center\">\n          {this.props.children}\n          <div\n            className={`at-curtain__btn-close at-curtain__btn-close--${closeBtnPosition}`}\n            onClick={this.close}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Index;\n"
        },
        'components/ArrowButton/index.tsx': {
          import: './components/ArrowButton',
          content:
            "import React, { Component } from 'react';\nimport classnames from 'classnames';\nimport './index.less';\n\ntype type = 'arc' | 'notching' | 'arrow' | 'arrow2' | 'coupon' | 'notching';\ninterface IProps {\n  type: type;\n}\n\nfunction ArrowButton(props: IProps) {\n  const { type = 'arrow' } = props;\n\n  return (\n    <div className=\"btn-wrap\">\n      <div className={`${type}`}></div>\n    </div>\n  );\n}\n\nexport default ArrowButton;\n"
        },
        'components/Countdown/index.tsx': {
          import: './components/Countdown',
          content:
            "import React, { Component } from 'react'\nimport classNames from 'classnames'\nimport PropTypes from 'prop-types'\nimport { AtCountDownProps, AtCountdownState } from '@/types/countdown'\nimport AtCountdownItem from './Com'\nimport './index.less'\n\nconst toSeconds = (\n  day: number,\n  hours: number,\n  minutes: number,\n  seconds: number): number => day * 60 * 60 * 24 + hours * 60 * 60 + minutes * 60 + seconds\n\n\n\nclass AtCountdown extends Component<AtCountDownProps, AtCountdownState> {\n  public static defaultProps: AtCountDownProps\n\n  private seconds: number\n  private timer: NodeJS.Timeout | number | undefined\n\n  public constructor(props: AtCountDownProps) {\n    super(props);\n    const { day, hours, minutes, seconds } = this.props\n    this.seconds = toSeconds(day!, hours!, minutes!, seconds!)\n\n    console.log('2232323', this.seconds);\n\n    const {\n      day: _day,\n      hours: _hours,\n      minutes: _minutes,\n      seconds: _seconds\n    } = this.calculateTime();\n    this.state = {\n      _day,\n      _hours,\n      _minutes,\n      _seconds\n    }\n    this.timer = undefined\n  }\n\n  private setTimer(): void {\n    if (!this.timer) this.countdonwn()\n  }\n\n  private clearTimer(): void {\n    if (this.timer) {\n      clearTimeout(this.timer as number)\n      this.timer = undefined\n    }\n  }\n\n  private calculateTime() {\n    let [day, hours, minutes, seconds] = [0, 0, 0, 0]\n\n    // console.log('this.seconds', this.seconds);\n\n\n    if (this.seconds > 0) {\n      day = this.props.isShowDay ? Math.floor(this.seconds / (60 * 60 * 24)) : 0\n      hours = Math.floor(this.seconds / (60 * 60)) - day * 24\n      minutes = Math.floor(this.seconds / 60) - day * 24 * 60 - hours * 60\n      seconds =\n        Math.floor(this.seconds) -\n        day * 24 * 60 * 60 -\n        hours * 60 * 60 -\n        minutes * 60\n    }\n    // console.log('hours', hours)\n    return {\n      day,\n      hours,\n      minutes,\n      seconds\n    }\n  }\n\n  // 倒计时\n  private countdonwn(): void {\n    // console.log('123')\n    const { day, hours, minutes, seconds } = this.calculateTime()\n\n    this.setState({\n      _day: day,\n      _hours: hours,\n      _minutes: minutes,\n      _seconds: seconds\n    })\n    this.seconds--\n\n    if (this.seconds < 0) {\n      this.clearTimer()\n      this.props.onTimeUp && this.props.onTimeUp()\n      return\n    }\n\n    this.timer = setTimeout(() => {\n      this.countdonwn()\n    }, 1000)\n  }\n\n  public componentWillReceiveProps(nextProps: AtCountDownProps): void {\n    if (JSON.stringify(this.props) === JSON.stringify(nextProps)) return\n\n    const { day, hours, minutes, seconds } = nextProps\n    this.seconds = toSeconds(day!, hours!, minutes!, seconds!)\n    this.clearTimer()\n    this.setTimer()\n  }\n\n  public componentDidMount(): void {\n    this.setTimer()\n  }\n\n  public componentWillUnmount(): void {\n    this.clearTimer()\n  }\n\n\n\n\n  render(): JSX.Element {\n\n\n    const {\n      className,\n      customStyle,\n      format, //  day: '天',hours: '时',minutes: '分',seconds: '秒'\n      isShowDay, //\t是否显示天数\n      isShowHour, //是否显示小时\n    } = this.props\n\n    const { _day, _hours, _minutes, _seconds } = this.state\n\n    return (\n      <div\n        className={classNames(\n          {\n            'biu-countdown': true,\n          },\n          className\n        )}\n        style={{customStyle}}\n      >\n        {isShowDay && <AtCountdownItem num={_day} separator={format!.day} />}\n        {isShowHour && (<AtCountdownItem num={_hours} separator={format!.hours} />)}\n        <AtCountdownItem num={_minutes} separator={format!.minutes} />\n        <AtCountdownItem num={_seconds} separator={format!.seconds} />\n      </div>\n    )\n  }\n}\nAtCountdown.defaultProps = {\n  customStyle: '',\n  className: '',\n  isShowDay: false,\n  isShowHour: true,\n  format: {\n    day: '天',\n    hours: '时',\n    minutes: '分',\n    seconds: '秒'\n  },\n  day: 0,\n  hours: 0,\n  minutes: 0,\n  seconds: 0,\n  onTimeUp() {}\n}\n\n\nexport default AtCountdown\n"
        },
        'Com/index.tsx': {
          import: './Com',
          content:
            "import React, { Component } from 'react'\nimport PropTypes, { InferProps } from 'prop-types'\nimport { AtCountdownItemProps } from '@/types/countdown'\n\n\n\nclass AtCountdownItem extends Component<AtCountdownItemProps> {\n  public static defaultProps: AtCountdownItemProps\n  public static propTypes: InferProps<AtCountdownItemProps>\n\n  private formatNum(num: number): string {\n    return num <= 9 ? `0${num}` : `${num}`\n  }\n\n  public render(): JSX.Element {\n    const { num, separator } = this.props\n\n    return (\n      <div className='biu-countdown__item'>\n        <div className='biu-countdown__time-box'>\n          <span className='biu-countdown__time'>{this.formatNum(num)}</span>\n        </div>\n        <span className='biu-countdown__separator'>{separator}</span>\n      </div>\n    )\n  }\n}\n\nexport default AtCountdownItem;\n\nAtCountdownItem.defaultProps = {\n  num: 0,\n  separator: ':'\n}\n\nAtCountdownItem.propTypes = {\n  num: PropTypes.number.isRequired,\n  separator: PropTypes.string\n}\n"
        }
      },
      dependencies: {
        react: { version: '17.0.1' },
        classnames: { version: '2.2.6' },
        'prop-types': { version: '15.7.2' }
      },
      identifier: 'biuui-arrowbutton'
    }
  },
  'biuui-button': {
    component: require('/Users/shide/PROJ/biuUI/demo/Button.tsx').default,
    previewerProps: {
      sources: {
        _: {
          tsx:
            'import React from \'react\';\nimport { Button } from \'../src\';\n/**\n * title: Basic Modal\n * title.zh-CN: 基础 Modal\n * desc: This is a basic example of the antd Modal component\n * desc.zh-CN: 这是 antd Modal 组件的基础示例\n */\n\nfunction ButtonDemo() {\n  return (\n    <div>\n      默认：\n      <br />\n      <br />\n      <div>\n        <Button>按钮</Button>&nbsp;&nbsp;\n        <Button type="warning">按钮</Button>&nbsp;&nbsp;\n        <Button type="info">按钮</Button>&nbsp;&nbsp;\n        <Button type="default">按钮</Button>&nbsp;&nbsp;\n        <Button type="pure">按钮</Button>&nbsp;&nbsp;\n      </div>\n      <br />\n      <div>PC 悬浮效果</div>\n      <br />\n      <div>\n        <Button typeModel="slide" type="slider1">\n          {\' \'}\n          按钮\n        </Button>\n        <Button typeModel="slide" type="slider2">\n          按钮\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default ButtonDemo;\n'
        },
        'src/index.ts': {
          import: '../src',
          content:
            "export { default as Button } from './components/Button';\nexport { default as Tag } from './components/Tag';\nexport { default as Curtain } from './components/Curtain';\nexport { default as ArrowButton } from './components/ArrowButton';\nexport { default as Countdown } from './components/Countdown';\n"
        },
        'components/Button/index.tsx': {
          import: './components/Button',
          content:
            "import * as React from 'react';\nimport classnames from 'classnames';\nimport './index.less';\n\n/**\n * @param {onClick} func 对外暴露的点击事件\n * @param {className} string 自定义类名\n * @param {type} string 按钮类型 primary | warning | info | default | pure\n * @param {shape} string 按钮形状 circle | radius(默认)\n */\ntype ButtonType =\n  | 'primary'\n  | 'warning'\n  | 'info'\n  | 'default'\n  | 'pure'\n  | 'slider1'\n  | 'slider2';\n\ntype typeModel = 'nomal' | 'slide' | undefined;\n\ninterface IButton {\n  typeModel?: typeModel;\n  type?: ButtonType;\n  children?: React.ReactNode;\n  shape?: string;\n  block?: string;\n  className?: string;\n  onClick?: React.MouseEventHandler<HTMLElement>;\n}\nconst typeModelArr = {\n  nomal: 'biu-btn',\n  slide: 'bit-btn-slide'\n};\nfunction Button(props: IButton) {\n  const { children, onClick, className, type, shape, block, typeModel } = props;\n\n  const handTypeModal = (typeModel: typeModel): string => {\n    switch (true) {\n      case typeModel === 'slide':\n        return typeModelArr['slide'];\n      default:\n        return typeModelArr['nomal'];\n    }\n  };\n\n  return (\n    <button\n      className={classnames(\n        `${handTypeModal(typeModel)}`,\n        'ripple',\n        type,\n        shape,\n        block ? 'block' : '',\n        className\n      )}\n      onClick={onClick}\n    >\n      {children}\n    </button>\n  );\n}\n\nexport default Button;\n"
        },
        'index.less': {
          import: './index.less',
          content:
            '// @import "../../style/theme/default.scss";\n// @import "../../style/mixins/index.scss";\n\n\n\n\n// $font-size: $font-size-lg;\n\n// .at-count-down {\n//   display: inline-block;\n//   min-height: $font-size;\n\n//   &__item {\n//     display: inline-flex;\n//     align-items: center;\n//   }\n\n//   &__time-box {\n//     display: inline-block;\n//     text-align: center;\n//     min-width: $font-size;\n//     font: {\n//       size: $font-size;\n//       family: countDownFont;\n//       style: normal;\n//       weight: 400;\n//       variant: normal;\n//     }\n\n//     text-transform: none;\n//     text-rendering: auto;\n//     line-height: 1;\n//     -webkit-font-smoothing: antialiased;\n//     vertical-align: middle;\n//   }\n\n//   &__separator {\n//     font-size: $font-size-base;\n//     display: inline-flex;\n//     align-items: center;\n//     text-align: justify;\n//     padding: 0 $spacing-v-xs;\n//   }\n\n//   &--card {\n//     .at-count-down__time-box {\n//       padding: $spacing-v-xs 0;\n//       border: 1PX solid $color-border-grey;\n//       border-radius: $border-radius-md;\n//       color: #FF4949;\n//       display: inline-block;\n//       background-color: #fff;\n//       position: relative;\n\n//       .at-count-down__time {\n//         position: relative;\n//         z-index: $zindex-divider + 1;\n//       }\n\n//       &::after {\n//         position: absolute;\n//         content: \'\';\n//         width: 100%;\n//         height: 1PX;\n//         top: 50%;\n//         left: 0;\n//         z-index: $zindex-divider;\n//         background-color: $color-grey-3;\n//       }\n//     }\n//   }\n// }\n.biu-countdown{\n  display: inline-block;\n  .biu-countdown__item{\n    display: inline-flex;\n    align-items: center;\n    .biu-countdown__time-box{\n      color: #333;\n      display: inline-block;\n      background-color: #fff;\n      position: relative;\n      .biu-countdown__time{\n        \n      }\n    }\n    .biu-countdown__separator{\n      display: inline-flex;\n      text-align: justify;\n      align-items: center;\n    }\n  }\n}\n\n'
        },
        'components/Tag/index.tsx': {
          import: './components/Tag',
          content:
            "import React from 'react';\nimport classnames from 'classnames';\nimport './index.less';\n\n/**\n * 标签组件\n * @param {closable} boolean 是否可关闭\n * @param {onClose} func 标签关闭时的回调\n * @param {color} string 标签的颜色,不设置则为默认颜色\n */\nfunction Tag(props) {\n  let { children, closable, onClose, color } = props;\n  let tag = React.createRef();\n  let handleClose = () => {\n    onClose && onClose();\n    tag.current.style.display = 'none';\n  };\n  return (\n    <div\n      className={classnames('xTag', color ? 'xTagHasColor' : '')}\n      style={{ backgroundColor: color }}\n      ref={tag}\n    >\n      {children}\n      {closable && (\n        <span className=\"closeBtn\" onClick={handleClose}>\n          x\n        </span>\n      )}\n    </div>\n  );\n}\n\nexport default Tag;\n"
        },
        'components/Curtain/index.tsx': {
          import: './components/Curtain',
          content:
            "import React from 'react';\n\nimport './index.less';\n\ninterface IProps {\n  visible?: boolean;\n  title?: string;\n  onClose?: () => void;\n  closeBtnPosition?:\n    | 'top'\n    | 'top-left'\n    | 'top-right'\n    | 'bottom'\n    | 'bottom-left'\n    | 'bottom-right'\n    | 'none'\n    | undefined;\n}\n\ninterface IState {\n  _visible?: boolean;\n}\nclass Index extends React.Component<IProps, IState> {\n  public constructor(props: IProps) {\n    super(props);\n    const { visible } = props;\n    this.state = {\n      _visible: visible\n    };\n  }\n\n  public componentWillReceiveProps(nextProps: IProps) {\n    const { visible } = nextProps;\n    if (visible !== this.state._visible) {\n      this.setState({\n        _visible: visible\n      });\n    }\n  }\n\n  private handleClose = () => {\n    if (typeof this.props.onClose === 'function') {\n      this.props.onClose();\n    }\n  };\n\n  private close = () => {\n    this.setState(\n      {\n        _visible: false\n      },\n      this.handleClose\n    );\n  };\n\n  render(): JSX.Element | null {\n    const { _visible } = this.state;\n    const { visible, title, closeBtnPosition = 'bottom' } = this.props;\n    if (!visible) return null;\n    return (\n      <div\n        className=\"mask-con\"\n        style={{ visibility: _visible ? 'visible' : '' }}\n      >\n        <div className=\"layout__overlay\" onClick={this.close} />\n        <div className=\"layout__center\">\n          {this.props.children}\n          <div\n            className={`at-curtain__btn-close at-curtain__btn-close--${closeBtnPosition}`}\n            onClick={this.close}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Index;\n"
        },
        'components/ArrowButton/index.tsx': {
          import: './components/ArrowButton',
          content:
            "import React, { Component } from 'react';\nimport classnames from 'classnames';\nimport './index.less';\n\ntype type = 'arc' | 'notching' | 'arrow' | 'arrow2' | 'coupon' | 'notching';\ninterface IProps {\n  type: type;\n}\n\nfunction ArrowButton(props: IProps) {\n  const { type = 'arrow' } = props;\n\n  return (\n    <div className=\"btn-wrap\">\n      <div className={`${type}`}></div>\n    </div>\n  );\n}\n\nexport default ArrowButton;\n"
        },
        'components/Countdown/index.tsx': {
          import: './components/Countdown',
          content:
            "import React, { Component } from 'react'\nimport classNames from 'classnames'\nimport PropTypes from 'prop-types'\nimport { AtCountDownProps, AtCountdownState } from '@/types/countdown'\nimport AtCountdownItem from './Com'\nimport './index.less'\n\nconst toSeconds = (\n  day: number,\n  hours: number,\n  minutes: number,\n  seconds: number): number => day * 60 * 60 * 24 + hours * 60 * 60 + minutes * 60 + seconds\n\n\n\nclass AtCountdown extends Component<AtCountDownProps, AtCountdownState> {\n  public static defaultProps: AtCountDownProps\n\n  private seconds: number\n  private timer: NodeJS.Timeout | number | undefined\n\n  public constructor(props: AtCountDownProps) {\n    super(props);\n    const { day, hours, minutes, seconds } = this.props\n    this.seconds = toSeconds(day!, hours!, minutes!, seconds!)\n\n    console.log('2232323', this.seconds);\n\n    const {\n      day: _day,\n      hours: _hours,\n      minutes: _minutes,\n      seconds: _seconds\n    } = this.calculateTime();\n    this.state = {\n      _day,\n      _hours,\n      _minutes,\n      _seconds\n    }\n    this.timer = undefined\n  }\n\n  private setTimer(): void {\n    if (!this.timer) this.countdonwn()\n  }\n\n  private clearTimer(): void {\n    if (this.timer) {\n      clearTimeout(this.timer as number)\n      this.timer = undefined\n    }\n  }\n\n  private calculateTime() {\n    let [day, hours, minutes, seconds] = [0, 0, 0, 0]\n\n    // console.log('this.seconds', this.seconds);\n\n\n    if (this.seconds > 0) {\n      day = this.props.isShowDay ? Math.floor(this.seconds / (60 * 60 * 24)) : 0\n      hours = Math.floor(this.seconds / (60 * 60)) - day * 24\n      minutes = Math.floor(this.seconds / 60) - day * 24 * 60 - hours * 60\n      seconds =\n        Math.floor(this.seconds) -\n        day * 24 * 60 * 60 -\n        hours * 60 * 60 -\n        minutes * 60\n    }\n    // console.log('hours', hours)\n    return {\n      day,\n      hours,\n      minutes,\n      seconds\n    }\n  }\n\n  // 倒计时\n  private countdonwn(): void {\n    // console.log('123')\n    const { day, hours, minutes, seconds } = this.calculateTime()\n\n    this.setState({\n      _day: day,\n      _hours: hours,\n      _minutes: minutes,\n      _seconds: seconds\n    })\n    this.seconds--\n\n    if (this.seconds < 0) {\n      this.clearTimer()\n      this.props.onTimeUp && this.props.onTimeUp()\n      return\n    }\n\n    this.timer = setTimeout(() => {\n      this.countdonwn()\n    }, 1000)\n  }\n\n  public componentWillReceiveProps(nextProps: AtCountDownProps): void {\n    if (JSON.stringify(this.props) === JSON.stringify(nextProps)) return\n\n    const { day, hours, minutes, seconds } = nextProps\n    this.seconds = toSeconds(day!, hours!, minutes!, seconds!)\n    this.clearTimer()\n    this.setTimer()\n  }\n\n  public componentDidMount(): void {\n    this.setTimer()\n  }\n\n  public componentWillUnmount(): void {\n    this.clearTimer()\n  }\n\n\n\n\n  render(): JSX.Element {\n\n\n    const {\n      className,\n      customStyle,\n      format, //  day: '天',hours: '时',minutes: '分',seconds: '秒'\n      isShowDay, //\t是否显示天数\n      isShowHour, //是否显示小时\n    } = this.props\n\n    const { _day, _hours, _minutes, _seconds } = this.state\n\n    return (\n      <div\n        className={classNames(\n          {\n            'biu-countdown': true,\n          },\n          className\n        )}\n        style={{customStyle}}\n      >\n        {isShowDay && <AtCountdownItem num={_day} separator={format!.day} />}\n        {isShowHour && (<AtCountdownItem num={_hours} separator={format!.hours} />)}\n        <AtCountdownItem num={_minutes} separator={format!.minutes} />\n        <AtCountdownItem num={_seconds} separator={format!.seconds} />\n      </div>\n    )\n  }\n}\nAtCountdown.defaultProps = {\n  customStyle: '',\n  className: '',\n  isShowDay: false,\n  isShowHour: true,\n  format: {\n    day: '天',\n    hours: '时',\n    minutes: '分',\n    seconds: '秒'\n  },\n  day: 0,\n  hours: 0,\n  minutes: 0,\n  seconds: 0,\n  onTimeUp() {}\n}\n\n\nexport default AtCountdown\n"
        },
        'Com/index.tsx': {
          import: './Com',
          content:
            "import React, { Component } from 'react'\nimport PropTypes, { InferProps } from 'prop-types'\nimport { AtCountdownItemProps } from '@/types/countdown'\n\n\n\nclass AtCountdownItem extends Component<AtCountdownItemProps> {\n  public static defaultProps: AtCountdownItemProps\n  public static propTypes: InferProps<AtCountdownItemProps>\n\n  private formatNum(num: number): string {\n    return num <= 9 ? `0${num}` : `${num}`\n  }\n\n  public render(): JSX.Element {\n    const { num, separator } = this.props\n\n    return (\n      <div className='biu-countdown__item'>\n        <div className='biu-countdown__time-box'>\n          <span className='biu-countdown__time'>{this.formatNum(num)}</span>\n        </div>\n        <span className='biu-countdown__separator'>{separator}</span>\n      </div>\n    )\n  }\n}\n\nexport default AtCountdownItem;\n\nAtCountdownItem.defaultProps = {\n  num: 0,\n  separator: ':'\n}\n\nAtCountdownItem.propTypes = {\n  num: PropTypes.number.isRequired,\n  separator: PropTypes.string\n}\n"
        }
      },
      dependencies: {
        react: { version: '17.0.1' },
        classnames: { version: '2.2.6' },
        'prop-types': { version: '15.7.2' }
      },
      identifier: 'biuui-button'
    }
  },
  'biuui-countdown': {
    component: require('/Users/shide/PROJ/biuUI/demo/Countdown.tsx').default,
    previewerProps: {
      sources: {
        _: {
          tsx:
            "import React from 'react';\nimport { Countdown } from '../src';\nimport './index.less'\n\nfunction CountdownDemo() {\n  return (\n    <div>\n      <br /><br /><br /><br /><br />\n      <div style={{ marginBottom: '10px' }}>\n        <h6>默认格式：时 : 分 : 秒</h6>\n        <Countdown\n          seconds={10000}\n        />\n        <h6>显示天数</h6>\n        <Countdown\n          isShowDay\n          seconds={10000}\n        />\n      </div>\n      <div style={{ marginBottom: '10px' }}>\n        <h6 >自定义格式： 天 : hh : mm : ss</h6>\n        <Countdown\n          isShowHour\n          format={{ day: '天', hours: ':', minutes: ':', seconds: '' }}\n          seconds={10000} />\n      </div>\n      <div style={{ marginBottom: '10px' }}>\n        <h6>\t倒计时时间到，执行的回调函数</h6>\n        <Countdown\n          isShowHour\n          format={{ day: '天', hours: ':', minutes: ':', seconds: '' }}\n          seconds={20}\n          onTimeUp={() => { console.log('biu~') }}\n        />\n      </div>\n    </div>\n  );\n}\nexport default CountdownDemo;"
        },
        'src/index.ts': {
          import: '../src',
          content:
            "export { default as Button } from './components/Button';\nexport { default as Tag } from './components/Tag';\nexport { default as Curtain } from './components/Curtain';\nexport { default as ArrowButton } from './components/ArrowButton';\nexport { default as Countdown } from './components/Countdown';\n"
        },
        'components/Button/index.tsx': {
          import: './components/Button',
          content:
            "import * as React from 'react';\nimport classnames from 'classnames';\nimport './index.less';\n\n/**\n * @param {onClick} func 对外暴露的点击事件\n * @param {className} string 自定义类名\n * @param {type} string 按钮类型 primary | warning | info | default | pure\n * @param {shape} string 按钮形状 circle | radius(默认)\n */\ntype ButtonType =\n  | 'primary'\n  | 'warning'\n  | 'info'\n  | 'default'\n  | 'pure'\n  | 'slider1'\n  | 'slider2';\n\ntype typeModel = 'nomal' | 'slide' | undefined;\n\ninterface IButton {\n  typeModel?: typeModel;\n  type?: ButtonType;\n  children?: React.ReactNode;\n  shape?: string;\n  block?: string;\n  className?: string;\n  onClick?: React.MouseEventHandler<HTMLElement>;\n}\nconst typeModelArr = {\n  nomal: 'biu-btn',\n  slide: 'bit-btn-slide'\n};\nfunction Button(props: IButton) {\n  const { children, onClick, className, type, shape, block, typeModel } = props;\n\n  const handTypeModal = (typeModel: typeModel): string => {\n    switch (true) {\n      case typeModel === 'slide':\n        return typeModelArr['slide'];\n      default:\n        return typeModelArr['nomal'];\n    }\n  };\n\n  return (\n    <button\n      className={classnames(\n        `${handTypeModal(typeModel)}`,\n        'ripple',\n        type,\n        shape,\n        block ? 'block' : '',\n        className\n      )}\n      onClick={onClick}\n    >\n      {children}\n    </button>\n  );\n}\n\nexport default Button;\n"
        },
        'index.less': {
          import: './index.less',
          content:
            '.page-layout {\n  padding-top: 30px;\n  .layout {\n    width: 200px;\n    height: 200px;\n    background-color: #fff;\n    border-radius: 10px;\n  }\n}\n*{\n  margin: 0;\n  padding: 0;\n}'
        },
        'components/Tag/index.tsx': {
          import: './components/Tag',
          content:
            "import React from 'react';\nimport classnames from 'classnames';\nimport './index.less';\n\n/**\n * 标签组件\n * @param {closable} boolean 是否可关闭\n * @param {onClose} func 标签关闭时的回调\n * @param {color} string 标签的颜色,不设置则为默认颜色\n */\nfunction Tag(props) {\n  let { children, closable, onClose, color } = props;\n  let tag = React.createRef();\n  let handleClose = () => {\n    onClose && onClose();\n    tag.current.style.display = 'none';\n  };\n  return (\n    <div\n      className={classnames('xTag', color ? 'xTagHasColor' : '')}\n      style={{ backgroundColor: color }}\n      ref={tag}\n    >\n      {children}\n      {closable && (\n        <span className=\"closeBtn\" onClick={handleClose}>\n          x\n        </span>\n      )}\n    </div>\n  );\n}\n\nexport default Tag;\n"
        },
        'components/Curtain/index.tsx': {
          import: './components/Curtain',
          content:
            "import React from 'react';\n\nimport './index.less';\n\ninterface IProps {\n  visible?: boolean;\n  title?: string;\n  onClose?: () => void;\n  closeBtnPosition?:\n    | 'top'\n    | 'top-left'\n    | 'top-right'\n    | 'bottom'\n    | 'bottom-left'\n    | 'bottom-right'\n    | 'none'\n    | undefined;\n}\n\ninterface IState {\n  _visible?: boolean;\n}\nclass Index extends React.Component<IProps, IState> {\n  public constructor(props: IProps) {\n    super(props);\n    const { visible } = props;\n    this.state = {\n      _visible: visible\n    };\n  }\n\n  public componentWillReceiveProps(nextProps: IProps) {\n    const { visible } = nextProps;\n    if (visible !== this.state._visible) {\n      this.setState({\n        _visible: visible\n      });\n    }\n  }\n\n  private handleClose = () => {\n    if (typeof this.props.onClose === 'function') {\n      this.props.onClose();\n    }\n  };\n\n  private close = () => {\n    this.setState(\n      {\n        _visible: false\n      },\n      this.handleClose\n    );\n  };\n\n  render(): JSX.Element | null {\n    const { _visible } = this.state;\n    const { visible, title, closeBtnPosition = 'bottom' } = this.props;\n    if (!visible) return null;\n    return (\n      <div\n        className=\"mask-con\"\n        style={{ visibility: _visible ? 'visible' : '' }}\n      >\n        <div className=\"layout__overlay\" onClick={this.close} />\n        <div className=\"layout__center\">\n          {this.props.children}\n          <div\n            className={`at-curtain__btn-close at-curtain__btn-close--${closeBtnPosition}`}\n            onClick={this.close}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Index;\n"
        },
        'components/ArrowButton/index.tsx': {
          import: './components/ArrowButton',
          content:
            "import React, { Component } from 'react';\nimport classnames from 'classnames';\nimport './index.less';\n\ntype type = 'arc' | 'notching' | 'arrow' | 'arrow2' | 'coupon' | 'notching';\ninterface IProps {\n  type: type;\n}\n\nfunction ArrowButton(props: IProps) {\n  const { type = 'arrow' } = props;\n\n  return (\n    <div className=\"btn-wrap\">\n      <div className={`${type}`}></div>\n    </div>\n  );\n}\n\nexport default ArrowButton;\n"
        },
        'components/Countdown/index.tsx': {
          import: './components/Countdown',
          content:
            "import React, { Component } from 'react'\nimport classNames from 'classnames'\nimport PropTypes from 'prop-types'\nimport { AtCountDownProps, AtCountdownState } from '@/types/countdown'\nimport AtCountdownItem from './Com'\nimport './index.less'\n\nconst toSeconds = (\n  day: number,\n  hours: number,\n  minutes: number,\n  seconds: number): number => day * 60 * 60 * 24 + hours * 60 * 60 + minutes * 60 + seconds\n\n\n\nclass AtCountdown extends Component<AtCountDownProps, AtCountdownState> {\n  public static defaultProps: AtCountDownProps\n\n  private seconds: number\n  private timer: NodeJS.Timeout | number | undefined\n\n  public constructor(props: AtCountDownProps) {\n    super(props);\n    const { day, hours, minutes, seconds } = this.props\n    this.seconds = toSeconds(day!, hours!, minutes!, seconds!)\n\n    console.log('2232323', this.seconds);\n\n    const {\n      day: _day,\n      hours: _hours,\n      minutes: _minutes,\n      seconds: _seconds\n    } = this.calculateTime();\n    this.state = {\n      _day,\n      _hours,\n      _minutes,\n      _seconds\n    }\n    this.timer = undefined\n  }\n\n  private setTimer(): void {\n    if (!this.timer) this.countdonwn()\n  }\n\n  private clearTimer(): void {\n    if (this.timer) {\n      clearTimeout(this.timer as number)\n      this.timer = undefined\n    }\n  }\n\n  private calculateTime() {\n    let [day, hours, minutes, seconds] = [0, 0, 0, 0]\n\n    // console.log('this.seconds', this.seconds);\n\n\n    if (this.seconds > 0) {\n      day = this.props.isShowDay ? Math.floor(this.seconds / (60 * 60 * 24)) : 0\n      hours = Math.floor(this.seconds / (60 * 60)) - day * 24\n      minutes = Math.floor(this.seconds / 60) - day * 24 * 60 - hours * 60\n      seconds =\n        Math.floor(this.seconds) -\n        day * 24 * 60 * 60 -\n        hours * 60 * 60 -\n        minutes * 60\n    }\n    // console.log('hours', hours)\n    return {\n      day,\n      hours,\n      minutes,\n      seconds\n    }\n  }\n\n  // 倒计时\n  private countdonwn(): void {\n    // console.log('123')\n    const { day, hours, minutes, seconds } = this.calculateTime()\n\n    this.setState({\n      _day: day,\n      _hours: hours,\n      _minutes: minutes,\n      _seconds: seconds\n    })\n    this.seconds--\n\n    if (this.seconds < 0) {\n      this.clearTimer()\n      this.props.onTimeUp && this.props.onTimeUp()\n      return\n    }\n\n    this.timer = setTimeout(() => {\n      this.countdonwn()\n    }, 1000)\n  }\n\n  public componentWillReceiveProps(nextProps: AtCountDownProps): void {\n    if (JSON.stringify(this.props) === JSON.stringify(nextProps)) return\n\n    const { day, hours, minutes, seconds } = nextProps\n    this.seconds = toSeconds(day!, hours!, minutes!, seconds!)\n    this.clearTimer()\n    this.setTimer()\n  }\n\n  public componentDidMount(): void {\n    this.setTimer()\n  }\n\n  public componentWillUnmount(): void {\n    this.clearTimer()\n  }\n\n\n\n\n  render(): JSX.Element {\n\n\n    const {\n      className,\n      customStyle,\n      format, //  day: '天',hours: '时',minutes: '分',seconds: '秒'\n      isShowDay, //\t是否显示天数\n      isShowHour, //是否显示小时\n    } = this.props\n\n    const { _day, _hours, _minutes, _seconds } = this.state\n\n    return (\n      <div\n        className={classNames(\n          {\n            'biu-countdown': true,\n          },\n          className\n        )}\n        style={{customStyle}}\n      >\n        {isShowDay && <AtCountdownItem num={_day} separator={format!.day} />}\n        {isShowHour && (<AtCountdownItem num={_hours} separator={format!.hours} />)}\n        <AtCountdownItem num={_minutes} separator={format!.minutes} />\n        <AtCountdownItem num={_seconds} separator={format!.seconds} />\n      </div>\n    )\n  }\n}\nAtCountdown.defaultProps = {\n  customStyle: '',\n  className: '',\n  isShowDay: false,\n  isShowHour: true,\n  format: {\n    day: '天',\n    hours: '时',\n    minutes: '分',\n    seconds: '秒'\n  },\n  day: 0,\n  hours: 0,\n  minutes: 0,\n  seconds: 0,\n  onTimeUp() {}\n}\n\n\nexport default AtCountdown\n"
        },
        'Com/index.tsx': {
          import: './Com',
          content:
            "import React, { Component } from 'react'\nimport PropTypes, { InferProps } from 'prop-types'\nimport { AtCountdownItemProps } from '@/types/countdown'\n\n\n\nclass AtCountdownItem extends Component<AtCountdownItemProps> {\n  public static defaultProps: AtCountdownItemProps\n  public static propTypes: InferProps<AtCountdownItemProps>\n\n  private formatNum(num: number): string {\n    return num <= 9 ? `0${num}` : `${num}`\n  }\n\n  public render(): JSX.Element {\n    const { num, separator } = this.props\n\n    return (\n      <div className='biu-countdown__item'>\n        <div className='biu-countdown__time-box'>\n          <span className='biu-countdown__time'>{this.formatNum(num)}</span>\n        </div>\n        <span className='biu-countdown__separator'>{separator}</span>\n      </div>\n    )\n  }\n}\n\nexport default AtCountdownItem;\n\nAtCountdownItem.defaultProps = {\n  num: 0,\n  separator: ':'\n}\n\nAtCountdownItem.propTypes = {\n  num: PropTypes.number.isRequired,\n  separator: PropTypes.string\n}\n"
        }
      },
      dependencies: {
        react: { version: '17.0.1' },
        classnames: { version: '2.2.6' },
        'prop-types': { version: '15.7.2' }
      },
      identifier: 'biuui-countdown'
    }
  },
  'biuui-curtain': {
    component: require('/Users/shide/PROJ/biuUI/demo/Curtain.tsx').default,
    previewerProps: {
      sources: {
        _: {
          tsx:
            "import React, { useState } from 'react';\nimport { Curtain } from '../src';\nimport './index.less';\n\nconst Index = () => {\n  const [isModalVisible, setIsModalVisible] = useState(true);\n  const [closeBtnPosition, setCloseBtnPosition] = useState('bottom');\n\n  return (\n    <div className=\"page-layout\">\n      <div\n        onClick={() => {\n          setIsModalVisible(true);\n        }}\n      >\n        点击幕帘\n      </div>\n\n      <Curtain\n        visible={isModalVisible}\n        onClose={() => {\n          setIsModalVisible(false);\n        }}\n        closeBtnPosition=\"bottom\"\n      >\n        <div className=\"layout\">这是内容这是内容这是内容这是内容</div>\n      </Curtain>\n    </div>\n  );\n};\n\nexport default Index;\n"
        },
        'src/index.ts': {
          import: '../src',
          content:
            "export { default as Button } from './components/Button';\nexport { default as Tag } from './components/Tag';\nexport { default as Curtain } from './components/Curtain';\nexport { default as ArrowButton } from './components/ArrowButton';\nexport { default as Countdown } from './components/Countdown';\n"
        },
        'components/Button/index.tsx': {
          import: './components/Button',
          content:
            "import * as React from 'react';\nimport classnames from 'classnames';\nimport './index.less';\n\n/**\n * @param {onClick} func 对外暴露的点击事件\n * @param {className} string 自定义类名\n * @param {type} string 按钮类型 primary | warning | info | default | pure\n * @param {shape} string 按钮形状 circle | radius(默认)\n */\ntype ButtonType =\n  | 'primary'\n  | 'warning'\n  | 'info'\n  | 'default'\n  | 'pure'\n  | 'slider1'\n  | 'slider2';\n\ntype typeModel = 'nomal' | 'slide' | undefined;\n\ninterface IButton {\n  typeModel?: typeModel;\n  type?: ButtonType;\n  children?: React.ReactNode;\n  shape?: string;\n  block?: string;\n  className?: string;\n  onClick?: React.MouseEventHandler<HTMLElement>;\n}\nconst typeModelArr = {\n  nomal: 'biu-btn',\n  slide: 'bit-btn-slide'\n};\nfunction Button(props: IButton) {\n  const { children, onClick, className, type, shape, block, typeModel } = props;\n\n  const handTypeModal = (typeModel: typeModel): string => {\n    switch (true) {\n      case typeModel === 'slide':\n        return typeModelArr['slide'];\n      default:\n        return typeModelArr['nomal'];\n    }\n  };\n\n  return (\n    <button\n      className={classnames(\n        `${handTypeModal(typeModel)}`,\n        'ripple',\n        type,\n        shape,\n        block ? 'block' : '',\n        className\n      )}\n      onClick={onClick}\n    >\n      {children}\n    </button>\n  );\n}\n\nexport default Button;\n"
        },
        'index.less': {
          import: './index.less',
          content:
            '.page-layout {\n  padding-top: 30px;\n  .layout {\n    width: 200px;\n    height: 200px;\n    background-color: #fff;\n    border-radius: 10px;\n  }\n}\n*{\n  margin: 0;\n  padding: 0;\n}'
        },
        'components/Tag/index.tsx': {
          import: './components/Tag',
          content:
            "import React from 'react';\nimport classnames from 'classnames';\nimport './index.less';\n\n/**\n * 标签组件\n * @param {closable} boolean 是否可关闭\n * @param {onClose} func 标签关闭时的回调\n * @param {color} string 标签的颜色,不设置则为默认颜色\n */\nfunction Tag(props) {\n  let { children, closable, onClose, color } = props;\n  let tag = React.createRef();\n  let handleClose = () => {\n    onClose && onClose();\n    tag.current.style.display = 'none';\n  };\n  return (\n    <div\n      className={classnames('xTag', color ? 'xTagHasColor' : '')}\n      style={{ backgroundColor: color }}\n      ref={tag}\n    >\n      {children}\n      {closable && (\n        <span className=\"closeBtn\" onClick={handleClose}>\n          x\n        </span>\n      )}\n    </div>\n  );\n}\n\nexport default Tag;\n"
        },
        'components/Curtain/index.tsx': {
          import: './components/Curtain',
          content:
            "import React from 'react';\n\nimport './index.less';\n\ninterface IProps {\n  visible?: boolean;\n  title?: string;\n  onClose?: () => void;\n  closeBtnPosition?:\n    | 'top'\n    | 'top-left'\n    | 'top-right'\n    | 'bottom'\n    | 'bottom-left'\n    | 'bottom-right'\n    | 'none'\n    | undefined;\n}\n\ninterface IState {\n  _visible?: boolean;\n}\nclass Index extends React.Component<IProps, IState> {\n  public constructor(props: IProps) {\n    super(props);\n    const { visible } = props;\n    this.state = {\n      _visible: visible\n    };\n  }\n\n  public componentWillReceiveProps(nextProps: IProps) {\n    const { visible } = nextProps;\n    if (visible !== this.state._visible) {\n      this.setState({\n        _visible: visible\n      });\n    }\n  }\n\n  private handleClose = () => {\n    if (typeof this.props.onClose === 'function') {\n      this.props.onClose();\n    }\n  };\n\n  private close = () => {\n    this.setState(\n      {\n        _visible: false\n      },\n      this.handleClose\n    );\n  };\n\n  render(): JSX.Element | null {\n    const { _visible } = this.state;\n    const { visible, title, closeBtnPosition = 'bottom' } = this.props;\n    if (!visible) return null;\n    return (\n      <div\n        className=\"mask-con\"\n        style={{ visibility: _visible ? 'visible' : '' }}\n      >\n        <div className=\"layout__overlay\" onClick={this.close} />\n        <div className=\"layout__center\">\n          {this.props.children}\n          <div\n            className={`at-curtain__btn-close at-curtain__btn-close--${closeBtnPosition}`}\n            onClick={this.close}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Index;\n"
        },
        'components/ArrowButton/index.tsx': {
          import: './components/ArrowButton',
          content:
            "import React, { Component } from 'react';\nimport classnames from 'classnames';\nimport './index.less';\n\ntype type = 'arc' | 'notching' | 'arrow' | 'arrow2' | 'coupon' | 'notching';\ninterface IProps {\n  type: type;\n}\n\nfunction ArrowButton(props: IProps) {\n  const { type = 'arrow' } = props;\n\n  return (\n    <div className=\"btn-wrap\">\n      <div className={`${type}`}></div>\n    </div>\n  );\n}\n\nexport default ArrowButton;\n"
        },
        'components/Countdown/index.tsx': {
          import: './components/Countdown',
          content:
            "import React, { Component } from 'react'\nimport classNames from 'classnames'\nimport PropTypes from 'prop-types'\nimport { AtCountDownProps, AtCountdownState } from '@/types/countdown'\nimport AtCountdownItem from './Com'\nimport './index.less'\n\nconst toSeconds = (\n  day: number,\n  hours: number,\n  minutes: number,\n  seconds: number): number => day * 60 * 60 * 24 + hours * 60 * 60 + minutes * 60 + seconds\n\n\n\nclass AtCountdown extends Component<AtCountDownProps, AtCountdownState> {\n  public static defaultProps: AtCountDownProps\n\n  private seconds: number\n  private timer: NodeJS.Timeout | number | undefined\n\n  public constructor(props: AtCountDownProps) {\n    super(props);\n    const { day, hours, minutes, seconds } = this.props\n    this.seconds = toSeconds(day!, hours!, minutes!, seconds!)\n\n    console.log('2232323', this.seconds);\n\n    const {\n      day: _day,\n      hours: _hours,\n      minutes: _minutes,\n      seconds: _seconds\n    } = this.calculateTime();\n    this.state = {\n      _day,\n      _hours,\n      _minutes,\n      _seconds\n    }\n    this.timer = undefined\n  }\n\n  private setTimer(): void {\n    if (!this.timer) this.countdonwn()\n  }\n\n  private clearTimer(): void {\n    if (this.timer) {\n      clearTimeout(this.timer as number)\n      this.timer = undefined\n    }\n  }\n\n  private calculateTime() {\n    let [day, hours, minutes, seconds] = [0, 0, 0, 0]\n\n    // console.log('this.seconds', this.seconds);\n\n\n    if (this.seconds > 0) {\n      day = this.props.isShowDay ? Math.floor(this.seconds / (60 * 60 * 24)) : 0\n      hours = Math.floor(this.seconds / (60 * 60)) - day * 24\n      minutes = Math.floor(this.seconds / 60) - day * 24 * 60 - hours * 60\n      seconds =\n        Math.floor(this.seconds) -\n        day * 24 * 60 * 60 -\n        hours * 60 * 60 -\n        minutes * 60\n    }\n    // console.log('hours', hours)\n    return {\n      day,\n      hours,\n      minutes,\n      seconds\n    }\n  }\n\n  // 倒计时\n  private countdonwn(): void {\n    // console.log('123')\n    const { day, hours, minutes, seconds } = this.calculateTime()\n\n    this.setState({\n      _day: day,\n      _hours: hours,\n      _minutes: minutes,\n      _seconds: seconds\n    })\n    this.seconds--\n\n    if (this.seconds < 0) {\n      this.clearTimer()\n      this.props.onTimeUp && this.props.onTimeUp()\n      return\n    }\n\n    this.timer = setTimeout(() => {\n      this.countdonwn()\n    }, 1000)\n  }\n\n  public componentWillReceiveProps(nextProps: AtCountDownProps): void {\n    if (JSON.stringify(this.props) === JSON.stringify(nextProps)) return\n\n    const { day, hours, minutes, seconds } = nextProps\n    this.seconds = toSeconds(day!, hours!, minutes!, seconds!)\n    this.clearTimer()\n    this.setTimer()\n  }\n\n  public componentDidMount(): void {\n    this.setTimer()\n  }\n\n  public componentWillUnmount(): void {\n    this.clearTimer()\n  }\n\n\n\n\n  render(): JSX.Element {\n\n\n    const {\n      className,\n      customStyle,\n      format, //  day: '天',hours: '时',minutes: '分',seconds: '秒'\n      isShowDay, //\t是否显示天数\n      isShowHour, //是否显示小时\n    } = this.props\n\n    const { _day, _hours, _minutes, _seconds } = this.state\n\n    return (\n      <div\n        className={classNames(\n          {\n            'biu-countdown': true,\n          },\n          className\n        )}\n        style={{customStyle}}\n      >\n        {isShowDay && <AtCountdownItem num={_day} separator={format!.day} />}\n        {isShowHour && (<AtCountdownItem num={_hours} separator={format!.hours} />)}\n        <AtCountdownItem num={_minutes} separator={format!.minutes} />\n        <AtCountdownItem num={_seconds} separator={format!.seconds} />\n      </div>\n    )\n  }\n}\nAtCountdown.defaultProps = {\n  customStyle: '',\n  className: '',\n  isShowDay: false,\n  isShowHour: true,\n  format: {\n    day: '天',\n    hours: '时',\n    minutes: '分',\n    seconds: '秒'\n  },\n  day: 0,\n  hours: 0,\n  minutes: 0,\n  seconds: 0,\n  onTimeUp() {}\n}\n\n\nexport default AtCountdown\n"
        },
        'Com/index.tsx': {
          import: './Com',
          content:
            "import React, { Component } from 'react'\nimport PropTypes, { InferProps } from 'prop-types'\nimport { AtCountdownItemProps } from '@/types/countdown'\n\n\n\nclass AtCountdownItem extends Component<AtCountdownItemProps> {\n  public static defaultProps: AtCountdownItemProps\n  public static propTypes: InferProps<AtCountdownItemProps>\n\n  private formatNum(num: number): string {\n    return num <= 9 ? `0${num}` : `${num}`\n  }\n\n  public render(): JSX.Element {\n    const { num, separator } = this.props\n\n    return (\n      <div className='biu-countdown__item'>\n        <div className='biu-countdown__time-box'>\n          <span className='biu-countdown__time'>{this.formatNum(num)}</span>\n        </div>\n        <span className='biu-countdown__separator'>{separator}</span>\n      </div>\n    )\n  }\n}\n\nexport default AtCountdownItem;\n\nAtCountdownItem.defaultProps = {\n  num: 0,\n  separator: ':'\n}\n\nAtCountdownItem.propTypes = {\n  num: PropTypes.number.isRequired,\n  separator: PropTypes.string\n}\n"
        }
      },
      dependencies: {
        react: { version: '17.0.1' },
        classnames: { version: '2.2.6' },
        'prop-types': { version: '15.7.2' }
      },
      identifier: 'biuui-curtain'
    }
  },
  'biuui-tag': {
    component: require('/Users/shide/PROJ/biuUI/demo/Tag.tsx').default,
    previewerProps: {
      sources: {
        _: {
          tsx:
            'import React from \'react\';\nimport { Tag, ArrowButton } from \'../src\';\n\nfunction TagDemo() {\n  return (\n    <div>\n      <Tag color="#06c">标签</Tag>\n      <Tag color="red">标签</Tag>\n      <Tag color="orange">标签</Tag>\n      <Tag>标签</Tag>\n      <br />\n      <Tag color="green" closable>\n        标签\n      </Tag>\n      <Tag closable>标签</Tag>\n    </div>\n  );\n}\n\nexport default TagDemo;\n'
        },
        'src/index.ts': {
          import: '../src',
          content:
            "export { default as Button } from './components/Button';\nexport { default as Tag } from './components/Tag';\nexport { default as Curtain } from './components/Curtain';\nexport { default as ArrowButton } from './components/ArrowButton';\nexport { default as Countdown } from './components/Countdown';\n"
        },
        'components/Button/index.tsx': {
          import: './components/Button',
          content:
            "import * as React from 'react';\nimport classnames from 'classnames';\nimport './index.less';\n\n/**\n * @param {onClick} func 对外暴露的点击事件\n * @param {className} string 自定义类名\n * @param {type} string 按钮类型 primary | warning | info | default | pure\n * @param {shape} string 按钮形状 circle | radius(默认)\n */\ntype ButtonType =\n  | 'primary'\n  | 'warning'\n  | 'info'\n  | 'default'\n  | 'pure'\n  | 'slider1'\n  | 'slider2';\n\ntype typeModel = 'nomal' | 'slide' | undefined;\n\ninterface IButton {\n  typeModel?: typeModel;\n  type?: ButtonType;\n  children?: React.ReactNode;\n  shape?: string;\n  block?: string;\n  className?: string;\n  onClick?: React.MouseEventHandler<HTMLElement>;\n}\nconst typeModelArr = {\n  nomal: 'biu-btn',\n  slide: 'bit-btn-slide'\n};\nfunction Button(props: IButton) {\n  const { children, onClick, className, type, shape, block, typeModel } = props;\n\n  const handTypeModal = (typeModel: typeModel): string => {\n    switch (true) {\n      case typeModel === 'slide':\n        return typeModelArr['slide'];\n      default:\n        return typeModelArr['nomal'];\n    }\n  };\n\n  return (\n    <button\n      className={classnames(\n        `${handTypeModal(typeModel)}`,\n        'ripple',\n        type,\n        shape,\n        block ? 'block' : '',\n        className\n      )}\n      onClick={onClick}\n    >\n      {children}\n    </button>\n  );\n}\n\nexport default Button;\n"
        },
        'index.less': {
          import: './index.less',
          content:
            '// @import "../../style/theme/default.scss";\n// @import "../../style/mixins/index.scss";\n\n\n\n\n// $font-size: $font-size-lg;\n\n// .at-count-down {\n//   display: inline-block;\n//   min-height: $font-size;\n\n//   &__item {\n//     display: inline-flex;\n//     align-items: center;\n//   }\n\n//   &__time-box {\n//     display: inline-block;\n//     text-align: center;\n//     min-width: $font-size;\n//     font: {\n//       size: $font-size;\n//       family: countDownFont;\n//       style: normal;\n//       weight: 400;\n//       variant: normal;\n//     }\n\n//     text-transform: none;\n//     text-rendering: auto;\n//     line-height: 1;\n//     -webkit-font-smoothing: antialiased;\n//     vertical-align: middle;\n//   }\n\n//   &__separator {\n//     font-size: $font-size-base;\n//     display: inline-flex;\n//     align-items: center;\n//     text-align: justify;\n//     padding: 0 $spacing-v-xs;\n//   }\n\n//   &--card {\n//     .at-count-down__time-box {\n//       padding: $spacing-v-xs 0;\n//       border: 1PX solid $color-border-grey;\n//       border-radius: $border-radius-md;\n//       color: #FF4949;\n//       display: inline-block;\n//       background-color: #fff;\n//       position: relative;\n\n//       .at-count-down__time {\n//         position: relative;\n//         z-index: $zindex-divider + 1;\n//       }\n\n//       &::after {\n//         position: absolute;\n//         content: \'\';\n//         width: 100%;\n//         height: 1PX;\n//         top: 50%;\n//         left: 0;\n//         z-index: $zindex-divider;\n//         background-color: $color-grey-3;\n//       }\n//     }\n//   }\n// }\n.biu-countdown{\n  display: inline-block;\n  .biu-countdown__item{\n    display: inline-flex;\n    align-items: center;\n    .biu-countdown__time-box{\n      color: #333;\n      display: inline-block;\n      background-color: #fff;\n      position: relative;\n      .biu-countdown__time{\n        \n      }\n    }\n    .biu-countdown__separator{\n      display: inline-flex;\n      text-align: justify;\n      align-items: center;\n    }\n  }\n}\n\n'
        },
        'components/Tag/index.tsx': {
          import: './components/Tag',
          content:
            "import React from 'react';\nimport classnames from 'classnames';\nimport './index.less';\n\n/**\n * 标签组件\n * @param {closable} boolean 是否可关闭\n * @param {onClose} func 标签关闭时的回调\n * @param {color} string 标签的颜色,不设置则为默认颜色\n */\nfunction Tag(props) {\n  let { children, closable, onClose, color } = props;\n  let tag = React.createRef();\n  let handleClose = () => {\n    onClose && onClose();\n    tag.current.style.display = 'none';\n  };\n  return (\n    <div\n      className={classnames('xTag', color ? 'xTagHasColor' : '')}\n      style={{ backgroundColor: color }}\n      ref={tag}\n    >\n      {children}\n      {closable && (\n        <span className=\"closeBtn\" onClick={handleClose}>\n          x\n        </span>\n      )}\n    </div>\n  );\n}\n\nexport default Tag;\n"
        },
        'components/Curtain/index.tsx': {
          import: './components/Curtain',
          content:
            "import React from 'react';\n\nimport './index.less';\n\ninterface IProps {\n  visible?: boolean;\n  title?: string;\n  onClose?: () => void;\n  closeBtnPosition?:\n    | 'top'\n    | 'top-left'\n    | 'top-right'\n    | 'bottom'\n    | 'bottom-left'\n    | 'bottom-right'\n    | 'none'\n    | undefined;\n}\n\ninterface IState {\n  _visible?: boolean;\n}\nclass Index extends React.Component<IProps, IState> {\n  public constructor(props: IProps) {\n    super(props);\n    const { visible } = props;\n    this.state = {\n      _visible: visible\n    };\n  }\n\n  public componentWillReceiveProps(nextProps: IProps) {\n    const { visible } = nextProps;\n    if (visible !== this.state._visible) {\n      this.setState({\n        _visible: visible\n      });\n    }\n  }\n\n  private handleClose = () => {\n    if (typeof this.props.onClose === 'function') {\n      this.props.onClose();\n    }\n  };\n\n  private close = () => {\n    this.setState(\n      {\n        _visible: false\n      },\n      this.handleClose\n    );\n  };\n\n  render(): JSX.Element | null {\n    const { _visible } = this.state;\n    const { visible, title, closeBtnPosition = 'bottom' } = this.props;\n    if (!visible) return null;\n    return (\n      <div\n        className=\"mask-con\"\n        style={{ visibility: _visible ? 'visible' : '' }}\n      >\n        <div className=\"layout__overlay\" onClick={this.close} />\n        <div className=\"layout__center\">\n          {this.props.children}\n          <div\n            className={`at-curtain__btn-close at-curtain__btn-close--${closeBtnPosition}`}\n            onClick={this.close}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Index;\n"
        },
        'components/ArrowButton/index.tsx': {
          import: './components/ArrowButton',
          content:
            "import React, { Component } from 'react';\nimport classnames from 'classnames';\nimport './index.less';\n\ntype type = 'arc' | 'notching' | 'arrow' | 'arrow2' | 'coupon' | 'notching';\ninterface IProps {\n  type: type;\n}\n\nfunction ArrowButton(props: IProps) {\n  const { type = 'arrow' } = props;\n\n  return (\n    <div className=\"btn-wrap\">\n      <div className={`${type}`}></div>\n    </div>\n  );\n}\n\nexport default ArrowButton;\n"
        },
        'components/Countdown/index.tsx': {
          import: './components/Countdown',
          content:
            "import React, { Component } from 'react'\nimport classNames from 'classnames'\nimport PropTypes from 'prop-types'\nimport { AtCountDownProps, AtCountdownState } from '@/types/countdown'\nimport AtCountdownItem from './Com'\nimport './index.less'\n\nconst toSeconds = (\n  day: number,\n  hours: number,\n  minutes: number,\n  seconds: number): number => day * 60 * 60 * 24 + hours * 60 * 60 + minutes * 60 + seconds\n\n\n\nclass AtCountdown extends Component<AtCountDownProps, AtCountdownState> {\n  public static defaultProps: AtCountDownProps\n\n  private seconds: number\n  private timer: NodeJS.Timeout | number | undefined\n\n  public constructor(props: AtCountDownProps) {\n    super(props);\n    const { day, hours, minutes, seconds } = this.props\n    this.seconds = toSeconds(day!, hours!, minutes!, seconds!)\n\n    console.log('2232323', this.seconds);\n\n    const {\n      day: _day,\n      hours: _hours,\n      minutes: _minutes,\n      seconds: _seconds\n    } = this.calculateTime();\n    this.state = {\n      _day,\n      _hours,\n      _minutes,\n      _seconds\n    }\n    this.timer = undefined\n  }\n\n  private setTimer(): void {\n    if (!this.timer) this.countdonwn()\n  }\n\n  private clearTimer(): void {\n    if (this.timer) {\n      clearTimeout(this.timer as number)\n      this.timer = undefined\n    }\n  }\n\n  private calculateTime() {\n    let [day, hours, minutes, seconds] = [0, 0, 0, 0]\n\n    // console.log('this.seconds', this.seconds);\n\n\n    if (this.seconds > 0) {\n      day = this.props.isShowDay ? Math.floor(this.seconds / (60 * 60 * 24)) : 0\n      hours = Math.floor(this.seconds / (60 * 60)) - day * 24\n      minutes = Math.floor(this.seconds / 60) - day * 24 * 60 - hours * 60\n      seconds =\n        Math.floor(this.seconds) -\n        day * 24 * 60 * 60 -\n        hours * 60 * 60 -\n        minutes * 60\n    }\n    // console.log('hours', hours)\n    return {\n      day,\n      hours,\n      minutes,\n      seconds\n    }\n  }\n\n  // 倒计时\n  private countdonwn(): void {\n    // console.log('123')\n    const { day, hours, minutes, seconds } = this.calculateTime()\n\n    this.setState({\n      _day: day,\n      _hours: hours,\n      _minutes: minutes,\n      _seconds: seconds\n    })\n    this.seconds--\n\n    if (this.seconds < 0) {\n      this.clearTimer()\n      this.props.onTimeUp && this.props.onTimeUp()\n      return\n    }\n\n    this.timer = setTimeout(() => {\n      this.countdonwn()\n    }, 1000)\n  }\n\n  public componentWillReceiveProps(nextProps: AtCountDownProps): void {\n    if (JSON.stringify(this.props) === JSON.stringify(nextProps)) return\n\n    const { day, hours, minutes, seconds } = nextProps\n    this.seconds = toSeconds(day!, hours!, minutes!, seconds!)\n    this.clearTimer()\n    this.setTimer()\n  }\n\n  public componentDidMount(): void {\n    this.setTimer()\n  }\n\n  public componentWillUnmount(): void {\n    this.clearTimer()\n  }\n\n\n\n\n  render(): JSX.Element {\n\n\n    const {\n      className,\n      customStyle,\n      format, //  day: '天',hours: '时',minutes: '分',seconds: '秒'\n      isShowDay, //\t是否显示天数\n      isShowHour, //是否显示小时\n    } = this.props\n\n    const { _day, _hours, _minutes, _seconds } = this.state\n\n    return (\n      <div\n        className={classNames(\n          {\n            'biu-countdown': true,\n          },\n          className\n        )}\n        style={{customStyle}}\n      >\n        {isShowDay && <AtCountdownItem num={_day} separator={format!.day} />}\n        {isShowHour && (<AtCountdownItem num={_hours} separator={format!.hours} />)}\n        <AtCountdownItem num={_minutes} separator={format!.minutes} />\n        <AtCountdownItem num={_seconds} separator={format!.seconds} />\n      </div>\n    )\n  }\n}\nAtCountdown.defaultProps = {\n  customStyle: '',\n  className: '',\n  isShowDay: false,\n  isShowHour: true,\n  format: {\n    day: '天',\n    hours: '时',\n    minutes: '分',\n    seconds: '秒'\n  },\n  day: 0,\n  hours: 0,\n  minutes: 0,\n  seconds: 0,\n  onTimeUp() {}\n}\n\n\nexport default AtCountdown\n"
        },
        'Com/index.tsx': {
          import: './Com',
          content:
            "import React, { Component } from 'react'\nimport PropTypes, { InferProps } from 'prop-types'\nimport { AtCountdownItemProps } from '@/types/countdown'\n\n\n\nclass AtCountdownItem extends Component<AtCountdownItemProps> {\n  public static defaultProps: AtCountdownItemProps\n  public static propTypes: InferProps<AtCountdownItemProps>\n\n  private formatNum(num: number): string {\n    return num <= 9 ? `0${num}` : `${num}`\n  }\n\n  public render(): JSX.Element {\n    const { num, separator } = this.props\n\n    return (\n      <div className='biu-countdown__item'>\n        <div className='biu-countdown__time-box'>\n          <span className='biu-countdown__time'>{this.formatNum(num)}</span>\n        </div>\n        <span className='biu-countdown__separator'>{separator}</span>\n      </div>\n    )\n  }\n}\n\nexport default AtCountdownItem;\n\nAtCountdownItem.defaultProps = {\n  num: 0,\n  separator: ':'\n}\n\nAtCountdownItem.propTypes = {\n  num: PropTypes.number.isRequired,\n  separator: PropTypes.string\n}\n"
        }
      },
      dependencies: {
        react: { version: '17.0.1' },
        classnames: { version: '2.2.6' },
        'prop-types': { version: '15.7.2' }
      },
      identifier: 'biuui-tag'
    }
  }
};
